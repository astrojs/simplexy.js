// Generated by CoffeeScript 1.4.0
(function() {
  var Log,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Log = (function() {

    Log.prototype.logSize = 5 * 1024 * 1024;

    Log.prototype.data = [];

    function Log(fname) {
      this.fname = fname;
      this.toFile = __bind(this.toFile, this);

      this.finish = __bind(this.finish, this);

      this.writeArray = __bind(this.writeArray, this);

      this.write = __bind(this.write, this);

      this.initialize2 = __bind(this.initialize2, this);

      this.initialize1 = __bind(this.initialize1, this);

      this.ready = false;
      this.domId = "" + this.fname + "-" + (Math.floor(new Date() / 1000));
      this.el = document.createElement('div');
      this.el.setAttribute('id', this.domId);
      this.readyEvt = document.createEvent("HTMLEvents");
      this.readyEvt.initEvent("log:ready", false, true);
      this.removeEvt = document.createEvent("HTMLEvents");
      this.removeEvt.initEvent("log:remove", false, true);
      window.requestFileSystem = window.requestFileSystem || window.webkitRequestFileSystem;
      window.requestFileSystem(window.TEMPORARY, this.logSize, this.initialize1, this.errorHandler);
    }

    Log.prototype.initialize1 = function(fs) {
      var _this = this;
      this.el.addEventListener('log:remove', function() {
        _this.el.removeEventListener('log:remove', arguments.callee, false);
        return _this.initialize2(fs);
      }, false);
      return fs.root.getFile(this.fname, {
        create: false
      }, function(fileEntry) {
        return fileEntry.remove(function() {
          return _this.el.dispatchEvent(_this.removeEvt);
        }, function() {
          return _this.el.dispatchEvent(_this.removeEvt);
        });
      }, function() {
        return _this.el.dispatchEvent(_this.removeEvt);
      });
    };

    Log.prototype.initialize2 = function(fs) {
      var _this = this;
      return fs.root.getFile(this.fname, {
        create: true
      }, function(fileEntry) {
        return fileEntry.createWriter(function(fileWriter) {
          fileWriter.onerror = function(e) {
            return console.log("ERROR: " + (e.toString()));
          };
          _this.fileWriter = fileWriter;
          _this.fileWriter.addEventListener("writeend", function() {
            var div, link;
            link = document.createElement('a');
            link.setAttribute('href', fileEntry.toURL());
            link.setAttribute('download', "" + _this.fname);
            link.innerHTML = "Download Log";
            link.style.color = '#0071E5';
            link.style.fontSize = '11px';
            link.style.textDecoration = 'none';
            link.style.border = '1px solid #0071E5';
            link.style.padding = '2px 6px';
            div = document.createElement('div');
            div.appendChild(link);
            div.style.position = 'absolute';
            div.style.bottom = '10px';
            div.style.left = '10px';
            return document.body.appendChild(div);
          }, false);
          _this.ready = true;
          return _this.el.dispatchEvent(_this.readyEvt);
        }, _this.errorHandler);
      }, this.errorHandler);
    };

    Log.prototype.errorHandler = function(e) {
      var msg;
      msg = "";
      switch (e.code) {
        case FileError.QUOTA_EXCEEDED_ERR:
          msg = "QUOTA_EXCEEDED_ERR";
          break;
        case FileError.NOT_FOUND_ERR:
          msg = "NOT_FOUND_ERR";
          break;
        case FileError.SECURITY_ERR:
          msg = "SECURITY_ERR";
          break;
        case FileError.INVALID_MODIFICATION_ERR:
          msg = "INVALID_MODIFICATION_ERR";
          break;
        case FileError.INVALID_STATE_ERR:
          msg = "INVALID_STATE_ERR";
          break;
        default:
          msg = "Unknown Error";
      }
      return console.log("Error: " + msg);
    };

    Log.prototype.write = function(line) {
      return this.data.push(line);
    };

    Log.prototype.writeArray = function(arr) {
      var val, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = arr.length; _i < _len; _i++) {
        val = arr[_i];
        _results.push(this.write(val));
      }
      return _results;
    };

    Log.prototype.finish = function() {
      var _this = this;
      if (this.ready) {
        return this.toFile();
      } else {
        return this.el.addEventListener('log:ready', function() {
          _this.el.removeEventListener('log:ready', arguments.callee, false);
          return _this.toFile();
        }, false);
      }
    };

    Log.prototype.toFile = function() {
      var blob;
      blob = new Blob([this.data.join('\r\n')], {
        type: 'text/plain'
      });
      return this.fileWriter.write(blob);
    };

    return Log;

  })();

  if (this.astro == null) {
    this.astro = {};
  }

  this.astro.Log = Log;

}).call(this);
